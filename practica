package main
import (
	"fmt"
	"database/sql"
	_ "github.com/go-sql-driver/mysql"	
)
var (
	err error
	db *sql.DB
)
func main(){
	nuevaConexionDB()
	crearTablaBD()
	resultadosQuery("tipo_membresia")
	tablaBD()
	var nombre string
	agregarBD()
	cerrarDB()
	
    
}
func nuevaConexionDB(){
	//usuario:contrase√±a@tcp(direccion:puerto)/nombreBase
	db, err = sql.Open("mysql", string("bienhechor:Bienhechor_1234;@tcp(74.208.31.248:3306)/bienhechor"))
	
	if err != nil{
		panic(err)
		fmt.Println("False")
	}

	fmt.Println("True")	
	err=db.Ping()
	revisarError(err)
}
func tablaBD(){
	datos := db.QueryRow("SELECT id_membresia, tipo_membresia FROM membresia")
	err=datos.Scan(&id_membresia, &tipo_membresia)
	revisarError()
	fmt.Println(datos)
}
func resultadosQuery(){
	query, _ := db.Query("SELECT * FROM membresia")

	for query.Next(){
		var id, tipo_membresia string
		err = query.Scan(&id, &tipo_membresia)
		revisarError(err)
		fmt.Println(id,tipo_membresia)
	}
}
func crearTablaBD(tabla []Tablas) {
	const nombreTabla = "membresia"

	var tablaExist = false

	for i := 0; i < len(tabla); i++ {
		if tabla[i].Nombre == nombreTabla {
			tablaExist = true
		}
	}

	if tablaExist == false {
		crear, err := db.Exec("CREATE TABLE " + membresia + "(id int primary key auto_increment, tipo_membresia varchar(50) not null);")
		revisarError(err)
		_, err = crear.RowsAffected()
		revisaarError(err)
	}

}
func verificar(nombre string){
	verifica, err := db.Exec("SELECT"+nombre+" FROM"+membresia+"WHERE, ?", tipo_membresia)
	if()
}
func agregarBD(membresia, columnas, nombre string) int64 {
	ftm("Para agregar una membresia ingrese su nombre completo")
	fmt.Scanf(&nombre)
	insertar, err := db.Exec("INSERT INTO "+membresia+" ("+columnas+") VALUES ?", nombre)
	revisarError(err)
	status, err := insertar.LastInsertId()
	return nombre
	if(status!=0){
		fmt("True")
	}
	else{
		fmt.("False")
	}


}
func revisarError(err error){
	if err != nil{
		panic(err)
	}
}
func cerrarDB(){
	defer db.close();
}